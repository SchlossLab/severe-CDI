configfile: 'config/default.yml'

MEM_PER_GB = 1024
start_seed = 100
nseeds = config['nseeds']
seeds = range(start_seed, start_seed + nseeds)

ncores = config['ncores']
ml_methods = config['ml_methods']
kfold = config['kfold']
outcomes = config['outcomes']
tax_levels = config['tax_levels']
metrics = config['metrics']

datasets = ['full', 'int']
result_types = ['performance', 'feature-importance']

include: 'rules/mothur.smk'
include: 'rules/machine-learning.smk'

rule targets:
    input:
        expand('results/{type}_results_aggregated.csv', type = result_types),
        "figures/plot_perf.png"

rule classify_idsa_severity:
    input:
        'scripts/severity_analysis.R',
        "scripts/utilities.R",
        "data/process/final_CDI_16S_metadata.tsv",
        "data/raw/max_creat.csv",
        "data/raw/max_wbc.csv",
        "data/raw/r21_fullcohort_edited_deidentified.csv",
        "data/raw/HPI-1878 Lab.csv"
    output:
        csv="data/process/case_idsa_severity.csv",
        png="results/figures/idsa_severe_n.png"
    script:
        'scripts/severity_analysis.R'

rule prep_severity_data_for_ml:
    input:
        R='workflow/scripts/prep_severity_data_for_ml.R',
        fcn='workflow/scripts/filter_first_samples.R',
        sra='data/SraRunTable.csv',
        otu='data/mothur/cdi.opti_mcc.shared',
        meta='data/process/final_CDI_16S_metadata.tsv',
        idsa='data/process/case_idsa_severity.csv',
        attrib='data/raw/mishare/clinical_outcomes.csv',
        unattrib='data/raw/mishare/clinical_outcomes_pt2.csv'
    output:
        idsa=expand('data/process/{outcome}_{dataset}_{taxlevel}.csv',
                    outcome = ['idsa', 'attrib', 'allcause'],
                    dataset = datasets,
                    taxlevel = ['OTU']#, 'genus']
                    ),
        cases=expand('data/process/cases_{dataset}_metadata.csv',
                     dataset = datasets)
    resources:
        mem_mb=MEM_PER_GB*8
    script:
        'scripts/prep_severity_data_for_ml.R'

rule test_R_code:
    input:
        R='tests/testthat.R',
        scripts=[os.path.join('workflow/rules/scripts',
                 file.strip('test-')) for file in os.listdir('tests/testthat')]
    script:
        '../tests/testthat.R'
