import os
import pathlib

containerized: "docker://kellysovacool/severe-cdi:latest"

configfile: 'config/default.yml'

MEM_PER_GB = 1024
start_seed = 100
nseeds = config['nseeds']
seeds = range(start_seed, start_seed + nseeds)

ncores = config['ncores']
ml_methods = config['ml_methods']
kfold = config['kfold']
outcomes = config['outcomes']
tax_levels = config['tax_levels']
metrics = config['metrics']
train_fracs = config['train_frac']
datasets = config['dataset_subsets']

result_types = ['performance', 'feature-importance', 'sensspec']

notebooks_dir = pathlib.Path('workflow', 'notebooks')
md_notebooks = [pathlib.Path(notebooks_dir, nb)
                for nb in os.listdir(notebooks_dir)
                if nb.endswith('.md')]

# to appease `mikropml-snakemake-workflow`
extra_config = config.copy()
extra_config['dataset_name'] = 'cdi'
extra_config['dataset_csv'] = 'cdi.csv'
extra_config['outcome_colname'] = 'severe'
extra_config['find_feature_importance'] = True

module mikropml:
    snakefile:
        github("SchlossLab/mikropml-snakemake-workflow",
               path="workflow/Snakefile",
               tag="v1.3.0"
               )
    config:
        extra_config

include: 'rules/mothur.smk'
include: 'rules/machine-learning.smk'
include: 'rules/plot.smk'
include: 'rules/temporal-split.smk'

figures_dict = {1: 'flowchart_sankey'}

rule targets:
    input:
        expand('results/{type}_results_aggregated.csv', type = result_types),
    default_target: True

rule classify_idsa_severity:
    input:
        "scripts/utilities.R",
        "data/process/final_CDI_16S_metadata.tsv",
        "data/raw/max_creat.csv",
        "data/raw/max_wbc.csv",
        "data/raw/r21_fullcohort_edited_deidentified.csv",
        "data/raw/HPI-1878 Lab.csv"
    output:
        csv="data/process/case_idsa_severity.csv",
        png="results/figures/idsa_severe_n.png"
    conda: "envs/mikropml.yml"
    script:
        'scripts/severity_analysis.R'

rule prep_severity_data_for_ml:
    input:
        fcn='workflow/scripts/filter_first_samples.R',
        sra='data/SraRunTable.csv',
        otu='data/mothur/alpha/cdi.opti_mcc.shared',
        meta='data/process/final_CDI_16S_metadata.tsv',
        idsa='data/process/case_idsa_severity.csv',
        attrib='data/raw/mishare/clinical_outcomes.csv',
        unattrib='data/raw/mishare/clinical_outcomes_pt2.csv'
    output:
        csv=expand('data/process/{outcome}_{dataset}_{taxlevel}.csv',
                    outcome = ['idsa', 'attrib', 'allcause', 'pragmatic'],
                    dataset = ['full', 'int'],
                    taxlevel = ['OTU']
                    ),
        cases=expand('data/process/cases_{dataset}_metadata.csv',
                     dataset = datasets)
    log: 'log/prep_severity_data_for_ml.log'
    resources:
        mem_mb=MEM_PER_GB*8
    conda: "envs/mikropml.yml"
    script:
        'scripts/prep_severity_data_for_ml.R'

rule test_R_code:
    input:
        scripts=[os.path.join('workflow/rules/scripts',
                 file.strip('test-')) for file in os.listdir('tests/testthat')]
    conda: "envs/mikropml.yml"
    script:
        '../tests/testthat.R'

rule install_quarto_ms:
    output:
        directory("_extensions/kelly-sovacool/manuscript")
    params:
        ext="kelly-sovacool/quarto-manuscript"
    conda:
        'envs/notebooks.yml'
    shell:
        """
        quarto add {params.ext} --no-prompt
        """

rule install_fontawesome:
    output:
        directory("_extensions/quarto-ext/fontawesome")
    conda:
        'envs/notebooks.yml'
    shell:
        """
        quarto install extension quarto-ext/fontawesome --no-prompt
        """

rule copy_figures:
    input:
        tiff=lambda wildcards: f"figures/{figures_dict[wildcards.fig_num]}.tiff"
    output:
        tiff="paper/figures/figure_{fig_num}.tiff"
    shell:
        """
        cp {input.tiff} {output.tiff}
        """

rule convert_figures:
    input:
        tiff="figures/{figname}.tiff"
    output:
        png="paper/figures/{figname}.png"
    shell:
        """
        convert {input.tiff} {output.png}
        """

rule render_paper:
    input:
        qmd='paper/paper.qmd',
        bib='paper/references.bib',
        tex='paper/header.tex',
        ext=rules.install_quarto_ms.output
    output:
        'docs/paper/paper.pdf',
        'docs/paper/paper.html'
    conda:
        'envs/notebooks.yml'
    shell:
        """
        quarto render {input.qmd}
        """

rule render_paper_md:
    input:
        qmd='paper/paper.qmd',
        bib='paper/references.bib',
        tex='paper/header.tex',
        ext=rules.install_quarto_ms.output
    output:
        'docs/paper/paper.md'
    conda:
        'envs/notebooks.yml'
    shell:
        """
        quarto render {input.qmd} --to gfm
        """

rule render_site:
    input:
        qmd="index.qmd",
        ext=rules.install_fontawesome.output
    output:
        'docs/index.html'
    conda:
        'envs/notebooks.yml'
    shell:
        """
        quarto render {input.qmd}
        """

rule render_rmd_notebook:
    input:
        rmd=f'{notebooks_dir}/{{file}}.Rmd'
    output:
        md=f'{notebooks_dir}/{{file}}.md'
    params:
        workdir=notebooks_dir
    conda:
        'envs/notebooks.yml'
    shell:
        """
        cd {params.workdir}
        fn="{wildcards.file}.Rmd"
        R -e "rmarkdown::render('$fn')"
        """

rule render_quarto_notebook:
    input:
        qmd=f'{notebooks_dir}/{{file}}.qmd'
    output:
        md=f'{notebooks_dir}/{{file}}.md'
    params:
        workdir=notebooks_dir
    conda:
        'envs/notebooks.yml'
    shell:
        """
        quarto render {input.qmd} --to gfm
        """

rule render_notebooks:
    input:
        md_notebooks
